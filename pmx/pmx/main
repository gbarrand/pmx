// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file pmx.license for terms.

#ifndef pmx_pmx_main
#define pmx_pmx_main

#include <string>

namespace pmx {

class context {
public:
  context(const std::string&) {}
  virtual ~context() {}
protected:
  context(const context&){}
  context& operator=(const context&){return *this;}
};

}

#include "version"

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

#include <exlib/app/main>
#include <exlib/png>
#include <exlib/jpeg>

#include <exlib/cbk/out>
#include <exlib/cbk/wall>

#include <inlib/ftp/cbk>
#include <inlib/cbk/files>

#include "dac"
#include "actions"
#include "opener"
#include "evt_bsg_opener"

namespace pmx {

class main : public exlib::app::main, public inlib::sg::view_evd, public dac {
  typedef exlib::app::main parent;
public:
  INLIB_SCLASS(pmx::main)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<main>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<view_evd>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<dac>(this,a_class)) return p;
    return parent::cast(a_class);
  }
private:
  INLIB_CLASS_STRING(format_dst)
protected:
  virtual inlib::sg::node* create_main_menu() {
    //m_out << "pmx::main::create_home_menu : " << std::endl;

    inlib::sg::list* list = new inlib::sg::list(ttf());
    set_style(*list);

    //list->text_height_automated.value(true); //too slow.
    //list->visible_items.value(10);

    inlib::sg::add_image_item(*this,*list,"detector","lhcb_side_256_128.jpg",action_vis_det);
    inlib::sg::add_image_item(*this,*list,"mag field","white.jpg",action_magfield);
    inlib::sg::add_image_item(*this,*list,"front","cam_lhcb_front.jpg",action_cam_front);
    inlib::sg::add_image_item(*this,*list,"side","cam_lhcb_side.jpg",action_cam_side);
    inlib::sg::add_image_item(*this,*list,"top","white.jpg",action_cam_top);
    inlib::sg::add_image_item(*this,*list,"3D","white.jpg",action_cam_3D);

    inlib::sg::add_image_item(*this,*list,inlib::sg::s_files(),"files.jpg",inlib::cbk::action_files);
    if(has_open_panel()) {
      inlib::sg::add_image_item(*this,*list,"open...","files.jpg",inlib::sg::action_open_open_panel);
    }

    if(m_ftps.size()) {
      inlib::sg::add_image_item
        (*this,*list,"ftp","location_ftp.jpg",inlib::ftp::action_ftp,inlib::ftp::pos_data(m_ftps,false,0,0));
    }

    inlib::sg::add_image_item(*this,*list,"next event","event.jpg",action_next);
    inlib::sg::add_image_item(*this,*list,"vis events","vis_events.jpg",action_vis_events);
    inlib::sg::add_image_item(*this,*list,"stop events","stop_events.jpg",inlib::sg::action_stop_event_anim);

    inlib::sg::add_image_item(*this,*list,"anim","object_rotate_left.jpg",inlib::sg::action_start_anim_around_focal);

    inlib::sg::add_image_item(*this,*list,"clear","edit_clear.jpg",inlib::sg::action_clear_scene);
    inlib::sg::add_image_item(*this,*list,"clear event","clear_event.jpg",inlib::sg::action_clear_dynamic_sg);
    inlib::sg::add_image_item(*this,*list,"reset","edit_undo.jpg",inlib::sg::action_reset_camera);

    if(m_walls._walls().size()) {
      inlib::sg::add_image_item(*this,*list,inlib::sg::s_wall(),"connect_to_wall.jpg",exlib::wall::action_main);
    }

    inlib::sg::add_image_item(*this,*list,"export","document_export.jpg",exlib::out::action_main);
    inlib::sg::add_image_item(*this,*list,"utils","tools.jpg",inlib::sg::action_utils);

   {std::vector<std::string> about;
    about.push_back("App : pmx");
    about.push_back("Version : "+std::string(PMX_VERSION));
    about.push_back("Author : Guy Barrand");
    inlib::sg::add_image_item(*this,*list,"about","icon.jpg",inlib::sg::action_about,about);}

    if(!inlib::device::stop_app_button()){
      inlib::sg::add_image_item(*this,*list,"exit","application_exit.jpg",inlib::sg::action_set_to_exit);
    }

    return list;
  }

  virtual void create_camenu_items(unsigned int a_nb,float a_wcw,float a_wch,float a_wb,float a_hb) {
    parent::create_camenu_items(a_nb,a_wcw,a_wch,a_wb,a_hb);

    create_main_button(m_out,m_res_dir,parent::m_params,       //0,3
                       m_camenu_sep,a_wcw,a_wch,a_wb,a_hb,0,
                       0,3,"next","","event.jpg",
                       new inlib::sg::gv_cbk(*this,action_next));

    //create_main_button(m_out,m_res_dir,m_params,
    //                   m_camenu_sep,a_wcw,a_wch,a_wb,a_hb,0,
    //                   2,0,"clear","","edit_clear.jpg",
    //                   new inlib::sg::gv_cbk(*this,inlib::sg::action_clear_dynamic_sg));
  }

public:
  virtual bool insh_dispatch(const std::string& a_cmd,const std::vector<std::string>& a_args) {
    if(a_cmd=="open_default_file"){
      std::string path = res_dir()+inlib::sep()+"bdpi_ghost.dst";
      pmx::opener _opener;
      inlib::args args;
      bool done;
      if(!_opener.open(path,*this,args,done)) set_to_exit();
      return true;
    }

    if(a_cmd=="next_event"){
      action_next(*this);
      return true;
    }
    
    return parent::insh_dispatch(a_cmd,a_args);
  }
public:
  main(std::ostream& a_out,
       inlib::sg::render_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const inlib::sg::selection& a_selection,
       const std::string& a_data_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int a_mem_limit)
  :parent("pmx",PMX_VERSION,a_out,a_gl_mgr,a_ttf,a_selection,
          a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,a_mem_limit)
  ,inlib::sg::view_evd(*((inlib::sg::gui_viewer*)this))
  ,dac(*((inlib::sg::gui_viewer*)this))
  {
    m_opener.clear_exts();
    m_opener.add_ext(".dst");
    m_opener.add_opener(s_format_dst(),new pmx::opener());

    m_opener.add_ext(inlib::file::s_ext_bsg());
   {inlib::sg::bsg_factories bfac;
    inlib::sg::add_factories(bfac);
    exlib::sg::add_factories(bfac);
    m_opener.add_opener(inlib::file::s_format_bsg(),new pmx::evt_bsg_opener(bfac));}

    m_image_readers.add_reader(inlib::file::s_format_jpeg(),new exlib::jpeg::reader());
    m_image_readers.add_reader(inlib::file::s_format_png(),new exlib::png::reader());

    if(inlib::device::is_Android()) {
      // When triggering a camenu button, we receive AMOTION_EVENT_ACTION_MOVE, which
      // will induce scene rotation if m_param.m_touch_move is true (see gui_viewer::touch_move()).
      m_params.m_touch_move = false;
    }
  }
  virtual ~main() {}
protected:
  main(const main& a_from):parent(a_from),inlib::sg::view_evd(a_from),dac(a_from) {}
private:
  main& operator=(const main&){return *this;}
};

}

#endif
