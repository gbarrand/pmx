// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file pmx.license for terms.

#ifndef pmx_magfield
#define pmx_magfield

// Read a cdf field map files.

// From PANORAMIX_v21r5.
// From LHCB_v35r3.
 
#include <inlib/vec3d>
#include <inlib/mat>
#include <inlib/edep/units>
#include <inlib/forit>
#include <inlib/mnmx>
#include <inlib/cstr>
#include <inlib/S_STRING>
#include <inlib/file>

//
#define PMX_HAS_ZLIB

#ifdef PMX_HAS_ZLIB
#include <exlib/gzip>
#include <inlib/buffer_reader>
#else
#include <fstream>
#endif
#include <vector>

namespace pmx {
namespace magfield {

struct grid_quadrant {
  std::vector<inlib::vec3d> m_q;
  double m_zoffset;
  double m_dxyz[3];
  unsigned int m_nxyz[3];
};

inline unsigned int a2ui(const std::string& a_s) {
/*
  unsigned int v;
  if(!inlib::to<unsigned int>(a_s,v,0)) {}
  return v;
*/
  return ::atoi(a_s.c_str());
}

inline double a2d(const std::string& a_s) {
/*
  double v;
  if(!inlib::to<double>(a_s,v,0)) {}
  return v;
*/
  return (double)::atof(a_s.c_str());
}
  
inline bool read_quadrant(std::ostream& a_out,const std::string& a_file,grid_quadrant& a_quad) {
  a_quad.m_q.clear();

  // open the file
#ifdef PMX_HAS_ZLIB

//exlib::gzip_reader infile; //too slow.
//if(!infile.open(a_file)) {
//  a_out << "pmx::magfield::read_quadrant :"
//        << " unable to open magnetic field file : " << a_file
//        << std::endl;
//  return false;
//}

  char* _buffer;
  long sz;
 {bool _is = false;
  if(inlib::file::is_gzip(a_file,_is)&&_is) {
    if(!exlib::gzip_read_bytes(a_file,_buffer,sz)) {
      a_out << "pmx::magfield::read_quadrant :"
            << " exlib::gzip_read_bytes() failed."
            << std::endl;
      return false;
    }
  } else {
    if(!inlib::file::read_bytes(a_file,_buffer,sz)) {
      a_out << "pmx::magfield::read_quadrant :"
            << " inlib::file::read_bytes() failed."
            << std::endl;
      return false;
    }
  }}
  if(!_buffer) return false;
  inlib::buffer_reader infile(_buffer,(unsigned int)sz); //give ownership of _buffer.
#else  
  std::ifstream infile(a_file.c_str());
  if(!infile) {
    a_out << "pmx::magfield::read_quadrant :"
          << " unable to open magnetic field file : " << a_file
          << std::endl;
    return false;
  }
#endif

  //m_msg << MSG::INFO  << "Opened magnetic field file : " << a_file << endmsg;
    
  // Skip the header till PARAMETER
  char line[255];
  do{
    infile.getline(line,255);
  } while( line[0] != 'P' );
    
  // Get the PARAMETER
  std::vector<std::string> sPar;
  sPar.reserve(2);
  char* token = ::strtok(line," ");
  do{
    if ( token ) { sPar.push_back(token); token = ::strtok( NULL, " " );} 
    else continue;
  } while ( token != NULL );
  if(sPar.size()<2) {infile.close();return false;}
  unsigned int npar = a2ui(sPar[1]);
    
  // Skip the header till GEOMETRY
  do{
    infile.getline( line, 255 );
  } while( line[0] != 'G' );
    
  // Skip any comment before GEOMETRY 
  do{
    infile.getline( line, 255 );
  } while( line[0] != '#' );
    
  // Get the GEOMETRY
  infile.getline( line, 255 );
  std::vector<std::string> sGeom;
  sGeom.reserve(7);
  token = ::strtok( line, " " );
  do{
    if ( token ) { sGeom.push_back(token); token = ::strtok( NULL, " " );} 
    else continue; 
  } while (token != NULL);
  if(sGeom.size()<7) {infile.close();return false;}
    
  // Grid dimensions are given in cm in CDF file. Convert to CLHEP units
    
  char* olcn = inlib::beg_LC_NUMERIC();

  a_quad.m_dxyz[0] = a2d(sGeom[0]) * inlib::edep::cm;
  a_quad.m_dxyz[1] = a2d(sGeom[1]) * inlib::edep::cm;
  a_quad.m_dxyz[2] = a2d(sGeom[2]) * inlib::edep::cm;
  a_quad.m_nxyz[0] = a2ui(sGeom[3]);
  a_quad.m_nxyz[1] = a2ui(sGeom[4]);
  a_quad.m_nxyz[2] = a2ui(sGeom[5]);
  a_quad.m_zoffset = a2d(sGeom[6]) * inlib::edep::cm;
    
  inlib::end_LC_NUMERIC(olcn);

  // Number of lines with data to be read
  int nlines = ( int(npar) - 7 ) / 3;
  if(nlines<=0) {infile.close();return false;}

  // Skip comments and fill a vector of magnetic components for the
  // x, y and z positions given in GEOMETRY

  unsigned int count = 0;
 {a_quad.m_q.resize(nlines);    
  char* olcn = inlib::beg_LC_NUMERIC();
  std::string sFx, sFy, sFz; 
  char* token;
  while(!infile.eof()) {

    // parse each line of the file, 
    // comment lines begin with '#' in the cdf file
    infile.getline( line, 255 );
    if ( line[0] == '#' ) continue;
    token = ::strtok( line, " " );
    if ( token ) { sFx = token; token = ::strtok( NULL, " " );} else continue;
    if ( token ) { sFy = token; token = ::strtok( NULL, " " );} else continue;
    if ( token ) { sFz = token; token = ::strtok( NULL, " " );} else continue;
    if ( token != NULL ) continue;
      
    // Field values are given in gauss in CDF file. Convert to CLHEP units
      
    if(int(count)>=nlines) {
      a_out << "pmx::magfield::read_quadrant :"
            << " number of points in field map exceed " << nlines
            << std::endl;
      a_quad.m_q.clear();
      inlib::end_LC_NUMERIC(olcn);
      infile.close();
      return false;
    }
    a_quad.m_q[count].set_value(a2d(sFx) * inlib::edep::gauss,
                                a2d(sFy) * inlib::edep::gauss,
                                a2d(sFz) * inlib::edep::gauss);
    count++;          
  }
  inlib::end_LC_NUMERIC(olcn);}

  infile.close();

  if(count!=nlines) {
    a_out << "pmx::magfield::read_quadrant :"
          << " number of points in field map does not match."
          << std::endl;
    a_quad.m_q.clear();
    return false;
  }

  return true;
}

class field_grid {
public:
  INLIB_SCLASS(pmx::magfield::field_grid)
public:
  field_grid():m_scaleFactor(1) {
    m_Dxyz[0] = 0.0;
    m_Dxyz[1] = 0.0;
    m_Dxyz[2] = 0.0;
    m_Nxyz[0] = 0;
    m_Nxyz[1] = 0;
    m_Nxyz[2] = 0;
    m_min_FL[0] = 0.0;
    m_min_FL[1] = 0.0;
    m_min_FL[2] = 0.0;
  }
private:
  field_grid(const field_grid&){}
  field_grid& operator=(const field_grid&){return *this;}  
public:
  bool field_at_closest_point( const inlib::vec3d& r,inlib::vec3d& a_fvec) const {
    /// Return the field vector fvec at the point xyz by choosing the
    /// closest point on the grid.

    a_fvec.set_value(0,0,0);

    // round of till the nearest bin
    int i = int( (r.x() - m_min_FL[0])/m_Dxyz[0] + 0.5 ) ;
    int j = int( (r.y() - m_min_FL[1])/m_Dxyz[1] + 0.5 ) ;
    int k = int( (r.z() - m_min_FL[2])/m_Dxyz[2] + 0.5 ) ;
    if((i<0)||(i>=int(m_Nxyz[0]))) return false;
    if((j<0)||(j>=int(m_Nxyz[1]))) return false;
    if((k<0)||(k>=int(m_Nxyz[2]))) return false;

    const inlib::vec3d& thisQ = m_Q[m_Nxyz[0]*( m_Nxyz[1]*k + j ) + i] ;
    a_fvec.set_value( scale_factor() * thisQ.x(),
                      scale_factor() * thisQ.y(),
                      scale_factor() * thisQ.z() ) ;

    return true;
  }

  bool field_gradient( const inlib::vec3d& r,inlib::mat<double,3>& a_rc) const {

    a_rc.set_zero();

    double x = r.x() - m_min_FL[0] ;  
    double y = r.y() - m_min_FL[1] ;
    double z = r.z() - m_min_FL[2] ;
    int i = int( x/m_Dxyz[0] ) ;
    int j = int( y/m_Dxyz[1] ) ;
    int k = int( z/m_Dxyz[2] ) ;
    if((i<0)||(i>=int(m_Nxyz[0]-1))) return false;
    if((j<0)||(j>=int(m_Nxyz[1]-1))) return false;
    if((k<0)||(k>=int(m_Nxyz[2]-1))) return false;

    // true interpolation is too expensive, is it? let's start with this

    int ijk000 = ( m_Nxyz[0]*( m_Nxyz[1]*k     + j )     + i );

    int dijk[3] ;
    dijk[0] = 1 ;
    dijk[1] = m_Nxyz[0] ;
    dijk[2] = m_Nxyz[0] * m_Nxyz[1] ;

    for(int col=0; col<3; ++col) {
      inlib::vec3d dQdX = m_Q[ ijk000 + dijk[col] ] - m_Q[ ijk000 ] ;
      a_rc.set_value(0,col, scale_factor() * dQdX.x() / m_Dxyz[col]);
      a_rc.set_value(1,col, scale_factor() * dQdX.y() / m_Dxyz[col]);
      a_rc.set_value(2,col, scale_factor() * dQdX.z() / m_Dxyz[col]);
    }

    return true;
  }

  bool field_by_interpolation( const inlib::vec3d& r,inlib::vec3d& a_bf) const {
    /// Return the field vector fvec at the point xyz by interpolation
    /// on the grid.

    //  Interpolate the field on a cube
    a_bf.set_value(0,0,0) ;

    double x = r.x() - m_min_FL[0] ;  
    double y = r.y() - m_min_FL[1] ;
    double z = r.z() - m_min_FL[2] ;

    int i = int( x/m_Dxyz[0] ) ;
    int j = int( y/m_Dxyz[1] ) ;
    int k = int( z/m_Dxyz[2] ) ;
    if((i<0)||(i>=int(m_Nxyz[0]-1))) return false;
    if((j<0)||(j>=int(m_Nxyz[1]-1))) return false;
    if((k<0)||(k>=int(m_Nxyz[2]-1))) return false;
    
    int ijk000 = ( m_Nxyz[0]*( m_Nxyz[1]*k     + j )     + i );
    int ijk001 = ( m_Nxyz[0]*( m_Nxyz[1]*(k+1) + j )     + i );
    int ijk010 = ( m_Nxyz[0]*( m_Nxyz[1]*k     + j + 1 ) + i );
    int ijk011 = ( m_Nxyz[0]*( m_Nxyz[1]*(k+1) + j + 1)  + i );
    int ijk100 = ( m_Nxyz[0]*( m_Nxyz[1]*k     + j)      + i + 1 );
    int ijk101 = ( m_Nxyz[0]*( m_Nxyz[1]*(k+1) + j)      + i + 1 );
    int ijk110 = ( m_Nxyz[0]*( m_Nxyz[1]*k     + j + 1)  + i + 1 );
    int ijk111 = ( m_Nxyz[0]*( m_Nxyz[1]*(k+1) + j + 1 ) + i + 1 );
      
    // auxiliary variables defined at the vertices of the cube that
    // contains the (x, y, z) point where the field is interpolated
    double cx000,cx001,cx010,cx011,cx100,cx101,cx110,cx111,
           cy000,cy001,cy010,cy011,cy100,cy101,cy110,cy111,
           cz000,cz001,cz010,cz011,cz100,cz101,cz110,cz111;
      
    cx000 = (m_Q)[ ijk000 ].x();
    cy000 = (m_Q)[ ijk000 ].y();
    cz000 = (m_Q)[ ijk000 ].z();
    cx001 = (m_Q)[ ijk001 ].x();
    cy001 = (m_Q)[ ijk001 ].y();
    cz001 = (m_Q)[ ijk001 ].z();
    cx010 = (m_Q)[ ijk010 ].x();
    cy010 = (m_Q)[ ijk010 ].y();
    cz010 = (m_Q)[ ijk010 ].z();
    cx011 = (m_Q)[ ijk011 ].x();
    cy011 = (m_Q)[ ijk011 ].y();
    cz011 = (m_Q)[ ijk011 ].z();
    cx100 = (m_Q)[ ijk100 ].x();
    cy100 = (m_Q)[ ijk100 ].y();
    cz100 = (m_Q)[ ijk100 ].z();
    cx101 = (m_Q)[ ijk101 ].x();
    cy101 = (m_Q)[ ijk101 ].y();
    cz101 = (m_Q)[ ijk101 ].z();
    cx110 = (m_Q)[ ijk110 ].x();
    cy110 = (m_Q)[ ijk110 ].y();
    cz110 = (m_Q)[ ijk110 ].z();
    cx111 = (m_Q)[ ijk111 ].x();
    cy111 = (m_Q)[ ijk111 ].y();
    cz111 = (m_Q)[ ijk111 ].z();
      
    double hx1 = ( x-i*m_Dxyz[0] )/m_Dxyz[0];
    double hy1 = ( y-j*m_Dxyz[1] )/m_Dxyz[1];
    double hz1 = ( z-k*m_Dxyz[2] )/m_Dxyz[2];
    double hx0 = 1.0-hx1;
    double hy0 = 1.0-hy1;
    double hz0 = 1.0-hz1;
      
    double h000 = hx0*hy0*hz0;
    double h001 = hx0*hy0*hz1;
    double h010 = hx0*hy1*hz0;
    double h011 = hx0*hy1*hz1;
    double h100 = hx1*hy0*hz0;
    double h101 = hx1*hy0*hz1;
    double h110 = hx1*hy1*hz0;
    double h111 = hx1*hy1*hz1;
      
    a_bf.v0( cx000*h000 + cx001*h001 + cx010*h010 + cx011*h011 +
             cx100*h100 + cx101*h101 + cx110*h110 + cx111*h111) ;
    a_bf.v1( cy000*h000 + cy001*h001 + cy010*h010 + cy011*h011 +
             cy100*h100 + cy101*h101 + cy110*h110 + cy111*h111 );
    a_bf.v2( cz000*h000 + cz001*h001 + cz010*h010 + cz011*h011 +
             cz100*h100 + cz101*h101 + cz110*h110 + cz111*h111 );
    a_bf *= scale_factor() ;

    return true;
  }

  void set_scale_factor( double s ) {  m_scaleFactor = s ; }
  double scale_factor() const { return m_scaleFactor ; }

  bool field_min_max(double& a_fmin,double& a_fmax,unsigned int& a_cmax) const {
    a_fmin = 0.0;
    a_fmax = 0.0;
    a_cmax = 0;

    double value;
    bool first = true;
    unsigned int count = 0;
    inlib_vforcit(inlib::vec3d,m_Q,it) {
      value = (*it).length();
      if(first) {
        a_fmin = value;
        a_fmax = value;
        a_cmax = 0;
        first = false;
      } else {
        a_fmin = inlib::mn<double>(a_fmin,value);
        if(value>=a_fmax) {
          a_fmax = value;
          a_cmax = count;
        }
      }
      count++;
    }

    return first==false?true:false;
  }

public:
  double m_scaleFactor;
  std::vector<inlib::vec3d> m_Q; ///< Field map
  double m_Dxyz[3];              ///< Steps in x, y and z
  unsigned int m_Nxyz[3];        ///< Number of steps in x, y and z
  double m_min_FL[3];            ///< Offset in x, y and z 
};

inline void fill_grid_from_quadrants(grid_quadrant a_quadrants[4],field_grid& a_grid) {
  ////////////////////////////////////////////////////////////////////////////////////////
  // routine to fill the grid from the 4 quadrants
  ////////////////////////////////////////////////////////////////////////////////////////

  // flip the signs of the field such that they are all in the same frame
  for( unsigned int iquad=1; iquad<4; ++iquad) {
    int signx(1), signy(1), signz(1) ;
    switch(iquad) {
    case 1: signx = -1 ; break ;
    case 2: signx = -1 ; signz = -1 ; break ;
    case 3: signz = -1 ;
    }
    std::vector<inlib::vec3d>& q = a_quadrants[iquad].m_q;
    inlib_vforit(inlib::vec3d,q,it) {
      (*it).set_value( signx * it->x(),signy * it->y(),signz * it->z() );
    }
  }
  
  // now we remap: put the 4 quadrants in a single grid
  unsigned int Nxquad = a_quadrants[0].m_nxyz[0] ;
  unsigned int Nyquad = a_quadrants[0].m_nxyz[1] ;
  unsigned int Nzquad = a_quadrants[0].m_nxyz[2] ;

  // new number of bins. take into account that they overlap at z axis
  a_grid.m_Dxyz[0] = a_quadrants[0].m_dxyz[0] ;
  a_grid.m_Dxyz[1] = a_quadrants[0].m_dxyz[1] ;
  a_grid.m_Dxyz[2] = a_quadrants[0].m_dxyz[2] ;
  a_grid.m_Nxyz[0] = 2*Nxquad - 1;
  a_grid.m_Nxyz[1] = 2*Nyquad - 1;
  a_grid.m_Nxyz[2] = Nzquad ;
  a_grid.m_Q.resize(a_grid.m_Nxyz[0] * a_grid.m_Nxyz[1] * a_grid.m_Nxyz[2], inlib::vec3d(0,0,0) ) ;

  unsigned int Nxyz_0 = a_grid.m_Nxyz[0];
  unsigned int Nxyz_1 = a_grid.m_Nxyz[1];

  unsigned int off_Q_z,off_q,off_y_mn,off_y_pl,off_x_mn,off_x_pl;
  for( unsigned int ix=0; ix<Nxquad; ++ix)
    for( unsigned int iy=0; iy<Nyquad; ++iy)
      for( unsigned int iz=0; iz<Nzquad; ++iz) {
        off_Q_z = Nxyz_0 * Nxyz_1 * iz;
        off_q = Nxquad * ( Nyquad * iz + iy ) + ix;
        off_y_mn = Nyquad-iy-1;
        off_y_pl = Nyquad+iy-1;
        off_x_mn = Nyquad-ix-1;
        off_x_pl = Nyquad+ix-1;

	// 4th quadrant (negative x, negative y)
	a_grid.m_Q[ off_Q_z + Nxyz_0 * off_y_mn + off_x_mn] = a_quadrants[3].m_q[off_q];
	// 2nd quadrant (negative x, positive y)
	a_grid.m_Q[ off_Q_z + Nxyz_0 * off_y_pl + off_x_mn] = a_quadrants[1].m_q[off_q];
	// 3rd quadrant (postive x, negative y)
	a_grid.m_Q[ off_Q_z + Nxyz_0 * off_y_mn + off_x_pl] = a_quadrants[2].m_q[off_q];
	// 1st quadrant (positive x, positive y)
	a_grid.m_Q[ off_Q_z + Nxyz_0 * off_y_pl + off_x_pl] = a_quadrants[0].m_q[off_q];
      }
  
  a_grid.m_min_FL[0] = - ((Nxquad-1) * a_grid.m_Dxyz[0]) ;
  a_grid.m_min_FL[1] = - ((Nyquad-1) * a_grid.m_Dxyz[1]) ;
  a_grid.m_min_FL[2] = a_quadrants[0].m_zoffset ;
  
/*
  if( UNLIKELY(m_msg.level() <= MSG::DEBUG) )
    m_msg << MSG::DEBUG 
          << "Field grid , nbins x,y,z  : (" << a_grid.m_Nxyz[0] << ","
          << a_grid.m_Nxyz[1] << "," <<  a_grid.m_Nxyz[2] << ")" << std::endl
          << "dx, xmin, xmax: "
          << "(" << a_grid.m_Dxyz[0] << "," << a_grid.m_min_FL[0] << ","
          << a_grid.m_min_FL[0] + (a_grid.m_Nxyz[0]-1) * a_grid.m_Dxyz[0] << ")" << std::endl 
          << "dy, ymin, ymax: "
          << "(" << a_grid.m_Dxyz[0] << "," << a_grid.m_min_FL[1] << ","
          << a_grid.m_min_FL[1] + (a_grid.m_Nxyz[1]-1) * a_grid.m_Dxyz[1] << ")" << std::endl 
          << "dz, zmin, zmax: "
          << "(" << a_grid.m_Dxyz[0] << "," << a_grid.m_min_FL[2] << ","
          << a_grid.m_min_FL[2] + (a_grid.m_Nxyz[2]-1) * a_grid.m_Dxyz[2] << ")" << endmsg ;
*/
}

inline bool read_files(std::ostream& a_out,const std::vector<std::string>& a_files,field_grid& a_grid) {
  if(a_files.size()!=4) return false;
  
  grid_quadrant quadrants[4];
 {for(unsigned int iquad=0;iquad<4;++iquad) {
    if(!read_quadrant(a_out,a_files[iquad],quadrants[iquad])) return false;
  }}
  
  // check that the quadrants are consistent
  for(unsigned int iquad=1; iquad<4;++iquad) {
    if(quadrants[0].m_zoffset != quadrants[iquad].m_zoffset) return false;
    for(unsigned int icoord = 0;icoord<3;++icoord) {
      if(quadrants[0].m_dxyz[icoord] != quadrants[iquad].m_dxyz[icoord]) return false;
      if(quadrants[0].m_nxyz[icoord] != quadrants[iquad].m_nxyz[icoord]) return false;
    }
  }
    
  fill_grid_from_quadrants(quadrants,a_grid);

  return true;
}

}}

#endif
